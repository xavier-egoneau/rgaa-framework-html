// components/_forms.scss

@use "../core/mixins" as *;
@use "../core/variables" as *;

// === VARIABLES FORMULAIRES ===
$input-padding-y: 0.375rem !default;
$input-padding-x: 0.75rem !default;
$input-color: get-color('dark') !default;
$input-bg: get-color('white') !default;
$input-border-color: #ced4da !default;
$input-border-width: 1px !default;
$input-border-radius: 0.25rem !default;
$input-focus-border-color: get-color('primary') !default;
$input-focus-box-shadow: 0 0 0 0.2rem rgba(get-color('primary'), 0.25) !default;

// === FORMULAIRES DE BASE ===
.rf-form-group {
  margin-bottom: 1rem;
}

.rf-form-label {
  display: inline-block;
  margin-bottom: 0.5rem;
  font-weight: 500;
  color: get-color('dark');
}

.rf-form-control {
  display: block;
  width: 100%;
  padding: $input-padding-y $input-padding-x;
  font-size: $font-size-base;
  font-weight: 400;
  line-height: $line-height-base;
  color: $input-color;
  background-color: $input-bg;
  background-clip: padding-box;
  border: $input-border-width solid $input-border-color;
  border-radius: $input-border-radius;
  appearance: none;
  transition: border-color 0.15s ease-in-out, box-shadow 0.15s ease-in-out;
  
  @media (prefers-reduced-motion: reduce) {
    transition: none;
  }
  
  &:focus {
    color: $input-color;
    background-color: $input-bg;
    border-color: $input-focus-border-color;
    outline: 0;
    box-shadow: $input-focus-box-shadow;
  }
  
  &::placeholder {
    color: get-color('secondary');
    opacity: 1;
  }
  
  &:disabled,
  &[readonly] {
    background-color: get-color('light');
    opacity: 1;
  }
  
  &:disabled {
    cursor: not-allowed;
  }
}

// === TEXTAREA ===
.rf-form-control.rf-textarea {
  resize: vertical;
  min-height: calc(1.5em + #{$input-padding-y * 2} + #{$input-border-width * 2});
}

// === SELECT ===
.rf-form-select {
  @extend .rf-form-control;
  
  background-image: url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 16 16'%3e%3cpath fill='none' stroke='%23343a40' stroke-linecap='round' stroke-linejoin='round' stroke-width='2' d='m1 6 7 7 7-7'/%3e%3c/svg%3e");
  background-repeat: no-repeat;
  background-position: right calc(0.375em + 0.1875rem) center;
  background-size: calc(0.75em + 0.375rem) calc(0.75em + 0.375rem);
  padding-right: calc(1.5em + 0.75rem);
  
  &:focus {
    background-image: url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 16 16'%3e%3cpath fill='none' stroke='%23005fcc' stroke-linecap='round' stroke-linejoin='round' stroke-width='2' d='m1 6 7 7 7-7'/%3e%3c/svg%3e");
  }
  
  &[multiple] {
    background-image: none;
    padding-right: $input-padding-x;
  }
}

// === CHECKBOX ET RADIO ===
.rf-form-check {
  display: block;
  min-height: 1.5rem;
  padding-left: 1.5em;
  margin-bottom: 0.125rem;
  
  .rf-form-check-input {
    float: left;
    margin-left: -1.5em;
    margin-top: 0.25em;
  }
}

.rf-form-check-input {
  width: 1em;
  height: 1em;
  margin-top: calc((1.5rem - 1em) / 2);
  vertical-align: top;
  background-color: get-color('white');
  background-repeat: no-repeat;
  background-position: center;
  background-size: contain;
  border: 1px solid rgba(0, 0, 0, 0.25);
  appearance: none;
  color: get-color('primary');
  
  &[type="checkbox"] {
    border-radius: 0.25em;
  }
  
  &[type="radio"] {
    border-radius: 50%;
  }
  
  &:active {
    filter: brightness(90%);
  }
  
  &:focus {
    border-color: get-color('primary');
    outline: 0;
    box-shadow: 0 0 0 0.25rem rgba(get-color('primary'), 0.25);
  }
  
  &:checked {
    background-color: get-color('primary');
    border-color: get-color('primary');
  }
  
  &:checked[type="checkbox"] {
    background-image: url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 20 20'%3e%3cpath fill='none' stroke='%23fff' stroke-linecap='round' stroke-linejoin='round' stroke-width='3' d='m6 10 3 3 6-6'/%3e%3c/svg%3e");
  }
  
  &:checked[type="radio"] {
    background-image: url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='-4 -4 8 8'%3e%3ccircle r='2' fill='%23fff'/%3e%3c/svg%3e");
  }
  
  &:disabled {
    pointer-events: none;
    filter: none;
    opacity: 0.5;
  }
}

.rf-form-check-label {
  color: get-color('dark');
  cursor: pointer;
  
  .rf-form-check-input:disabled + & {
    cursor: default;
    opacity: 0.5;
  }
}

// === BOUTONS ===
.rf-btn {
  // TOUTES les propriétés CSS AVANT le mixin
  background-color: get-color('primary');
  border-color: get-color('primary');
  color: get-color('white');
  
  // PUIS le mixin (qui contient des nested rules)
  @include button-base;
  
  // PUIS les nested rules
  &:hover {
    background-color: darken-color(get-color('primary'), 7.5%);
    border-color: darken-color(get-color('primary'), 10%);
    color: get-color('white');
  }
  
  &:focus {
    background-color: darken-color(get-color('primary'), 7.5%);
    border-color: darken-color(get-color('primary'), 10%);
    color: get-color('white');
    @include focus-ring();
  }
  
  &:active {
    background-color: darken-color(get-color('primary'), 10%);
    border-color: darken-color(get-color('primary'), 12.5%);
    color: get-color('white');
  }
  
  // Variantes
  &.rf-btn-secondary {
    background-color: get-color('secondary');
    border-color: get-color('secondary');
    color: get-color('white');
    
    &:hover,
    &:focus {
      background-color: darken-color(get-color('secondary'), 7.5%);
      border-color: darken-color(get-color('secondary'), 10%);
    }
  }
  
  &.rf-btn-success {
    background-color: get-color('success');
    border-color: get-color('success');
    color: get-color('white');
    
    &:hover,
    &:focus {
      background-color: darken-color(get-color('success'), 7.5%);
      border-color: darken-color(get-color('success'), 10%);
    }
  }
  
  &.rf-btn-danger {
    background-color: get-color('danger');
    border-color: get-color('danger');
    color: get-color('white');
    
    &:hover,
    &:focus {
      background-color: darken-color(get-color('danger'), 7.5%);
      border-color: darken-color(get-color('danger'), 10%);
    }
  }
  
  // Outline
  &.rf-btn-outline-primary {
    color: get-color('primary');
    border-color: get-color('primary');
    background-color: transparent;
    
    &:hover,
    &:focus {
      color: get-color('white');
      background-color: get-color('primary');
      border-color: get-color('primary');
    }
  }
  
  // Tailles
  &.rf-btn-lg {
    padding: 0.5rem 1rem;
    font-size: 1.25rem;
    border-radius: 0.3rem;
  }
  
  &.rf-btn-sm {
    padding: 0.25rem 0.5rem;
    font-size: 0.875rem;
    border-radius: 0.2rem;
  }
  
  // Bloc
  &.rf-btn-block {
    display: block;
    width: 100%;
  }
}

// === BOUTONS AVEC MIXINS HELPER ===
.rf-btn-primary {
  @include button-variant(get-color('primary'));
}

.rf-btn-secondary {
  @include button-variant(get-color('secondary'));
}

.rf-btn-success {
  @include button-variant(get-color('success'));
}

.rf-btn-danger {
  @include button-variant(get-color('danger'));
}

.rf-btn-warning {
  @include button-variant(get-color('warning'), get-color('warning'), get-color('dark'));
}

.rf-btn-info {
  @include button-variant(get-color('info'), get-color('info'), get-color('dark'));
}

.rf-btn-light {
  @include button-variant(get-color('light'), get-color('light'), get-color('dark'));
}

.rf-btn-dark {
  @include button-variant(get-color('dark'));
}

// Outline variants
.rf-btn-outline-primary {
  @include button-outline-variant(get-color('primary'));
}

.rf-btn-outline-secondary {
  @include button-outline-variant(get-color('secondary'));
}

.rf-btn-outline-success {
  @include button-outline-variant(get-color('success'));
}

.rf-btn-outline-danger {
  @include button-outline-variant(get-color('danger'));
}

// === VALIDATION ===
.rf-invalid-feedback {
  display: none;
  width: 100%;
  margin-top: 0.25rem;
  font-size: 0.875em;
  color: get-color('danger');
}

.rf-valid-feedback {
  display: none;
  width: 100%;
  margin-top: 0.25rem;
  font-size: 0.875em;
  color: get-color('success');
}

// États de validation avec mixins
@include form-validation-state('valid', get-color('success'));
@include form-validation-state('invalid', get-color('danger'));

// === INPUT GROUPS ===
.rf-input-group {
  position: relative;
  display: flex;
  flex-wrap: wrap;
  align-items: stretch;
  width: 100%;
  
  > .rf-form-control,
  > .rf-form-select {
    position: relative;
    flex: 1 1 auto;
    width: 1%;
    min-width: 0;
  }
}

.rf-input-group-text {
  display: flex;
  align-items: center;
  padding: $input-padding-y $input-padding-x;
  font-size: $font-size-base;
  font-weight: 400;
  line-height: $line-height-base;
  color: get-color('dark');
  text-align: center;
  white-space: nowrap;
  background-color: get-color('light');
  border: $input-border-width solid $input-border-color;
  border-radius: $input-border-radius;
}

.rf-input-group > :not(:last-child):not(.rf-dropdown-toggle):not(.rf-dropdown-menu) {
  border-top-right-radius: 0;
  border-bottom-right-radius: 0;
}

.rf-input-group > :not(:first-child):not(.rf-dropdown-menu) {
  margin-left: -$input-border-width;
  border-top-left-radius: 0;
  border-bottom-left-radius: 0;
}

// === FLOATING LABELS ===
.rf-form-floating {
  position: relative;
  
  > .rf-form-control,
  > .rf-form-select {
    height: calc(3.5rem + 2px);
    line-height: 1.25;
    padding: 1rem 0.75rem 0.25rem 0.75rem;
    
    &::placeholder {
      color: transparent;
    }
    
    &:focus,
    &:not(:placeholder-shown) {
      padding-top: 1.625rem;
      padding-bottom: 0.625rem;
    }
    
    &:focus ~ label,
    &:not(:placeholder-shown) ~ label {
      opacity: 0.65;
      transform: scale(0.85) translateY(-0.5rem) translateX(0.15rem);
    }
  }
  
  > label {
    position: absolute;
    top: 0;
    left: 0;
    height: 100%;
    padding: 1rem 0.75rem;
    pointer-events: none;
    border: $input-border-width solid transparent;
    transform-origin: 0 0;
    transition: opacity 0.1s ease-in-out, transform 0.1s ease-in-out;
    
    @media (prefers-reduced-motion: reduce) {
      transition: none;
    }
  }
}